//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.ImportResult
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class keys { }
#else

	public class keys : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public keys()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/DIS;component/SampleData/ImportResult/ImportResult.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private keyCollection _keyCollection = new keyCollection();

		public keyCollection keyCollection
		{
			get
			{
				return this._keyCollection;
			}
		}
	}

	public class key : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _productkey = string.Empty;

		public string productkey
		{
			get
			{
				return this._productkey;
			}

			set
			{
				if (this._productkey != value)
				{
					this._productkey = value;
					this.OnPropertyChanged("productkey");
				}
			}
		}

		private string _reason = string.Empty;

		public string reason
		{
			get
			{
				return this._reason;
			}

			set
			{
				if (this._reason != value)
				{
					this._reason = value;
					this.OnPropertyChanged("reason");
				}
			}
		}

		private string _keystatusinfile = string.Empty;

		public string keystatusinfile
		{
			get
			{
				return this._keystatusinfile;
			}

			set
			{
				if (this._keystatusinfile != value)
				{
					this._keystatusinfile = value;
					this.OnPropertyChanged("keystatusinfile");
				}
			}
		}

		private string _keystatusindb = string.Empty;

		public string keystatusindb
		{
			get
			{
				return this._keystatusindb;
			}

			set
			{
				if (this._keystatusindb != value)
				{
					this._keystatusindb = value;
					this.OnPropertyChanged("keystatusindb");
				}
			}
		}
	}

	public class keyCollection : System.Collections.ObjectModel.ObservableCollection<key>
	{ 
	}
#endif
}
