//------------------------------------------------------------------------------
// Copyright (c) 2010 Microsoft Corporation. All rights reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// Module Name:
//              KeyProvider.Facade.cpp
//
// Abstract:
// 	            These RPC called functions use COM interop to pass the call
//              to .Net functions implemented in KeyProvider.Library.dll.
//
// Author:
//              Don Schuy (v-dschuy)    JUN 16, 2010
//
// Environment:
//		        WinPE, Windows XP or better
//
// Revision History:
//		        JUN 16, 2010, v-dschuy
//			    Created.
//              OCT 22, 2010, v-dschuy
//              Added mutex so concurrent requests are handled sequentially
//              in line.
//------------------------------------------------------------------------------

// Set to 1 to write output to stderr.
#define DEBUG_OUTPUT 0

#include <stdlib.h>
#include <stdio.h>

// header file generated by MIDL compiler
#include "kplistener.h"

// MSDN article, "Using Mutex Objects"
// http://msdn.microsoft.com/en-us/library/ms686927.aspx
HANDLE ghMutex = NULL;

// Disable this error as it is intentional that the hBinding parameter is not utilized.
#pragma warning(disable: 4100) // 4100: unreferenced formal parameter

#include "ManagedAdapter.h"

using namespace ManagedAdapter;

ManagedBridge* ptr = NULL;

// Print a message to the console with the current date and time.
void printdate( char *msg )
{
    if(DEBUG_OUTPUT)
    {
        SYSTEMTIME st;
        GetLocalTime( &st );
        fprintf_s( stderr, "%s: %d/%d/%d %d:%d:%d\n", msg, st.wMonth, st.wDay, st.wYear, st.wHour, st.wMinute, st.wSecond );
    }
}

int createMutex( void )
{
    HRESULT hr = S_OK;

    if( ghMutex == NULL )
    {
        ghMutex = CreateMutex( 
            NULL,              // default security attributes
            FALSE,             // initially not owned
            NULL);             // unnamed mutex

        if( ghMutex == NULL ) 
        {
            hr = GetLastError();
            if(DEBUG_OUTPUT) fprintf_s( stderr, "CreateMutex error: %d\n", hr );
        }
        else
            if(DEBUG_OUTPUT) fprintf_s( stderr, "Created mutex" );
    }

    return hr;
}

// Invoke GetKey in the .Net KeyProvider.dll.
int GetKey( IN RPC_BINDING_HANDLE hBinding, LPWSTR pszParameters, DM_STRING pszProductKeyInfo )
{
    HRESULT hr = createMutex();
    if(hr != S_OK) return hr;

    switch( WaitForSingleObject( ghMutex, INFINITE ) ) 
    {
        // The thread got ownership of the mutex
        case WAIT_OBJECT_0: 
            printdate( "In GetKey" );
            if(DEBUG_OUTPUT) fprintf_s( stderr, "Parameters = %S\n", pszParameters );

	        ptr = new ManagedBridge();
            hr = ptr->GetKey( pszParameters, pszProductKeyInfo );
            delete ptr;

            if(DEBUG_OUTPUT) fprintf_s( stderr, "GetKey result %d\n", hr );
            if(DEBUG_OUTPUT) fprintf_s( stderr, "Product Key Info %S\n\n", pszProductKeyInfo );

            // Release ownership of the mutex object
            if(! ReleaseMutex( ghMutex ) ) 
            {
                // In a bad state.
                hr = S_FALSE;
            } 
            break; 

        // The thread got ownership of an abandoned mutex
        // The database is in an indeterminate state
        case WAIT_ABANDONED: 
            return S_FALSE; 
    }

    // Forward the GetKey result.
    return hr;
}

// Invoke UpdateKey in the .Net KeyProvider.dll.
int UpdateKey( IN RPC_BINDING_HANDLE hBinding, LPWSTR pszParameters, LPWSTR pszProductKeyInfo )
{
    HRESULT hr = createMutex();
    if(hr != S_OK) return hr;

    switch( WaitForSingleObject( ghMutex, INFINITE ) ) 
    {
        // The thread got ownership of the mutex
        case WAIT_OBJECT_0: 
            printdate( "In UpdateKey" );
            if(DEBUG_OUTPUT) fprintf_s( stderr, "Parameters = %S\n", pszParameters );
            if(DEBUG_OUTPUT) fprintf_s( stderr, "ProductKeyInfo = %S\n", pszProductKeyInfo );

	        ptr = new ManagedBridge();
            hr = ptr->UpdateKey( pszParameters, pszProductKeyInfo );
            delete ptr;

            if(DEBUG_OUTPUT) fprintf_s( stderr, "UpdateKey result %d\n\n", hr );

            // Release ownership of the mutex object
            if(! ReleaseMutex( ghMutex ) ) 
            {
                // In a bad state.
                hr = S_FALSE;
            } 
            break; 

        // The thread got ownership of an abandoned mutex
        // The database is in an indeterminate state
        case WAIT_ABANDONED: 
            return S_FALSE; 
    }

    // Forward the UpdateKey result.
    return hr;
}

// Allow client to shutdown the RPC service.
int Shutdown(IN RPC_BINDING_HANDLE hBinding)
{
    RPC_STATUS lStatus = -1;

    // The RpcMgmtStopServerListening function tells a server to stop listening for remote procedure calls.
    //
    lStatus = RpcMgmtStopServerListening( NULL );
    if (0 != lStatus )
    {
        return lStatus;
    }

    // The RpcServerUnregisterIf function removes an interface from the RPC run-time library registry.
    //
    lStatus = RpcServerUnregisterIf( NULL, NULL, FALSE );
    if (0 != lStatus )
    {
        return lStatus;
    }
  
    return 0;
}


// Invoke Ping in the .Net KeyProvider.dll.
int Ping( IN RPC_BINDING_HANDLE hBinding, DM_STRING pszProductKeyInfo )
{
    HRESULT hr = createMutex();
    if(hr != S_OK) return hr;

    switch( WaitForSingleObject( ghMutex, INFINITE ) ) 
    {
        // The thread got ownership of the mutex
        case WAIT_OBJECT_0: 
            printdate("In Ping");

            ptr = new ManagedBridge();
            hr = ptr->Ping( pszProductKeyInfo );
            delete ptr;

            if(DEBUG_OUTPUT) fprintf_s( stderr, "Ping result %d\n", hr );
            if(DEBUG_OUTPUT) fprintf_s( stderr, "Product Key Info %S\n\n", pszProductKeyInfo );

            // Release ownership of the mutex object
            if(! ReleaseMutex( ghMutex ) ) 
            {
                // In a bad state.
                hr = S_FALSE;
            } 
            break; 

        // The thread got ownership of an abandoned mutex
        // The database is in an indeterminate state
        case WAIT_ABANDONED: 
            return S_FALSE; 
    }

    // Forward the Ping result.
    return hr;
}