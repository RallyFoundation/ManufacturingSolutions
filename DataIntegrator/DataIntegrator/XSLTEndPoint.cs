//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Xsl;
using DataIntegrator.Helpers.XSLT;

namespace DataIntegrator
{
    public class XSLTEndPoint : EndPoint
    {
        private IDictionary<string, object> xsltParameters;

        private IDictionary<string, object> xsltExtensionObjects;

        private IDictionary<string, XslCompiledTransform> xsltCache;

        public override object[] Connect(params object[] Parameters)
        {
            //return base.Connect(Parameters);

            string operationName = Parameters[0] != null ? Parameters[0].ToString() : null;

            string xmlString = Parameters[1].ToString();

            Operation operation = !String.IsNullOrEmpty(operationName) ? this.GetOperation(operationName) : this.GetOperation(0);

            if (operation != null)
            {
                if ((operation.Arguments != null) && (operation.Arguments.Count > 0))
                {
                    if (this.xsltParameters == null)
                    {
                        this.xsltParameters = operation.GetArguments("XsltParameter");
                    }

                    if (this.xsltExtensionObjects == null)
                    {
                        IDictionary<string, object> extObjTypeNames = operation.GetArguments("XsltExtensionObject");

                        if ((extObjTypeNames != null) && (extObjTypeNames.Count > 0))
                        {
                            String[] assemblyNameAndTypeNames = null;

                            object extObject = null;

                            this.xsltExtensionObjects = new Dictionary<string, object>();

                            foreach (string key in extObjTypeNames.Keys)
                            {
                                assemblyNameAndTypeNames = extObjTypeNames[key].ToString().Split(new string[] {","}, StringSplitOptions.None);

                                extObject = DataIntegrator.Helpers.Utility.EnitObject(assemblyNameAndTypeNames[0], assemblyNameAndTypeNames[1]);

                                if (!this.xsltExtensionObjects.ContainsKey(key))
                                {
                                    this.xsltExtensionObjects.Add(key, extObject);
                                }
                                else
                                {
                                    this.xsltExtensionObjects[key] = extObject;
                                }
                                
                            }
                        }

                        bool isUsingDefaultXSLTExtension = ((operation.GetArgumentValue("IsUsingDefaultXsltExtension") != null) && (operation.GetArgumentValue("IsUsingDefaultXsltExtension").ToLower() == "true") || (operation.GetArgumentValue("IsUsingDefaultXsltExtension").ToLower() == "1"));

                        if (isUsingDefaultXSLTExtension)
                        {
                            if (this.xsltExtensionObjects == null)
                            {
                                this.xsltExtensionObjects = new Dictionary<string, object>();
                            }

                            if (!this.xsltExtensionObjects.ContainsKey("DI.DefaultEx"))
                            {
                                this.xsltExtensionObjects.Add("DI.DefaultEx", new DataIntegrator.Extensions.XSLT.DefaultXSLTExtension());
                            }
                            else
                            {
                                this.xsltExtensionObjects["DI.DefaultEx"] = new DataIntegrator.Extensions.XSLT.DefaultXSLTExtension();
                            }
                            
                        }
                    }
                }
            }

            XSLTHelper helper = new XSLTHelper();

            helper.EnableTracing = ((!String.IsNullOrEmpty(operation.GetArgumentValue("EnableTracing"))) && (operation.GetArgumentValue("EnableTracing").ToLower() == "true"));
            helper.TraceSourceName = operation.GetArgumentValue("TraceSourceName");

            if (this.xsltCache == null)
            {
                this.xsltCache = new Dictionary<string, XslCompiledTransform>();

                this.xsltCache.Add(this.Address, helper.CreateXsltTransform(this.Address));
            }

            string outputEncodingName = operation.GetArgumentValue("DefaultOutputEncoding");

            return new object[] { helper.GetTransformedXmlStringByXsltDocument(xmlString, this.xsltCache, this.Address, this.xsltParameters, this.xsltExtensionObjects, outputEncodingName) };
        }
    }
}

