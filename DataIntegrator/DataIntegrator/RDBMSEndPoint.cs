//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DataIntegrator.Helpers.RDBMS;
using DataIntegrator.Helpers.Snapshot;
using DataIntegrator.Descriptions.Data;

namespace DataIntegrator
{
    public class RDBMSEndPoint : EndPoint
    {
        private object snapshotCache;

        public RefDataTypes PrimaryKeys { get; set; }

        public RefDataTypes ForeignKeys { get; set; }

        public override object[] Connect(params object[] Parameters)
        {
            object[] returnValue = null;

            string operationName = Parameters[0] != null ? Parameters[0].ToString() : null;

            Operation operation = !String.IsNullOrEmpty(operationName) ? this.GetOperation(operationName) : this.GetOperation(0);

            string message = Parameters[1] != null ? Parameters[1].ToString() : operation.Message;

            RDBMSHelper helper = new RDBMSHelper();

            //if (this.snapshotCache == null)
            //{
            //    string snapshotLoaction = operation.GetArgumentValue("SnapshotLocation");

            //    //Snapshot loading and initialization to be implemented below:
            //    //
            //}

            helper.EnableTracing = ((!String.IsNullOrEmpty(operation.GetArgumentValue("EnableTracing"))) && (operation.GetArgumentValue("EnableTracing").ToLower() == "true"));
            helper.TraceSourceName = operation.GetArgumentValue("TraceSourceName");

            if (operation.Method == OperationMethod.BatchWrite)
            {
               string bulkCopyAssemblyName = operation.GetArgumentValue("BulkCopyAssemblyName");
               string bulkCopyTypeName = operation.GetArgumentValue("BulkCopyTypeName");

               return new object[]{helper.BulkCopy(message, this.Protocol.Component, this.Address, operation.Message, bulkCopyAssemblyName, bulkCopyTypeName)};
            }
            else if (operation.Method == OperationMethod.Retrieve)
            {
                string encodingName = operation.GetArgumentValue("DataSetXmlEncoding");

                return new object[] { helper.GetData(this.Protocol.Component, this.Address, this.DataType, operation.Message, operation.GetArgumentValue("CommandType"), encodingName)};
            }
            else if (operation.Method == OperationMethod.Modify)
            {
                SnapshotHelper snapshotHelper = new SnapshotHelper();

                if (this.snapshotCache == null)
                {
                    //Snapshot population from persistency mechanism to be implemented below:
                    //

                    this.snapshotCache = snapshotHelper.GetMostRecentSnapshot(operation.GetArgumentValue("SnapshotLocation"), operation.GetArgumentValue("DataSetXmlEncoding"));
                }

                string snapshot = this.snapshotCache != null ? this.snapshotCache.ToString() : null;

                //this.snapshotCache = message;

                //if (String.IsNullOrEmpty(snapshot))
                //{
                //    snapshot = message;
                //}

                //Snapshot persistency to be implemented below:
                //

                //if (this.snapshotCache == null)
                //{
                //    returnValue = new object[] { helper.BulkCopy(message, this.Protocol.Component, this.Address, operation.GetArgumentValue("DestinationTableName"), operation.GetArgumentValue("BulkCopyAssemblyName"), operation.GetArgumentValue("BulkCopyTypeName"), true) };
                //}
                //else
                {
                    IDictionary<string, IDictionary<string, string>> primaryKeyDictionary = (this.PrimaryKeys != null) ? this.PrimaryKeys.GetRefDataTypes() : null;

                    IDictionary<string, IDictionary<string, string>> foreignKeyDictionary = (this.ForeignKeys != null) ? this.ForeignKeys.GetRefDataTypes() : null;

                    Dictionary<string, string[]> primaryKeys = new Dictionary<string,string[]>();

                    foreach (string dataTableName in primaryKeyDictionary.Keys)
                    {
                        if (!primaryKeys.ContainsKey(dataTableName))
                        {
                            primaryKeys.Add(dataTableName, primaryKeyDictionary[dataTableName].Values.ToArray());
                        }
                        else
                        {
                            primaryKeys[dataTableName] = primaryKeyDictionary[dataTableName].Values.ToArray();
                        }
                    }

                    returnValue = new object[] { helper.Update(this.Protocol.Component, this.Address, this.DataType, operation.Message, operation.GetArgumentValue("CommandType"), OperationMethod.Modify, snapshot, message, operation.GetArgumentValue("DataSetXmlEncoding"), primaryKeys, foreignKeyDictionary) };
                }

                this.snapshotCache = message;

                snapshotHelper.SetSnapshot(operation.GetArgumentValue("SnapshotLocation"), message, operation.GetArgumentValue("DataSetXmlEncoding"));

                return returnValue;
            }
            else
            {
                return new object[] {helper.Query(this.Protocol.Component, this.Address, operation.Message, operation.GetArgumentValue("CommandType"), operation.Method) };
            }
        }
    }
}

