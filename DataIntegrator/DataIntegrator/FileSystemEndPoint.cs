//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DataIntegrator.Helpers.FileSystem;

namespace DataIntegrator
{
    public class FileSystemEndPoint : EndPoint
    {
        public override object[] Connect(params object[] Parameters)
        {
            //return base.Connect(Parameters);

            FileSystemHelper helper = new FileSystemHelper();

            string operationName = Parameters[0] != null ? Parameters[0].ToString() : null;

            Operation operation = !String.IsNullOrEmpty(operationName) ? this.GetOperation(operationName) : this.GetOperation(0);

            //string message = Parameters[1] != null ? Parameters[1].ToString() : operation.Message;

            helper.EnableTracing = ((!String.IsNullOrEmpty(operation.GetArgumentValue("EnableTracing"))) && (operation.GetArgumentValue("EnableTracing").ToLower() == "true"));
            helper.TraceSourceName = operation.GetArgumentValue("TraceSourceName");

            if (operation.Method == OperationMethod.Retrieve)
            {
                //return new object[] { helper.GetFile(this.Address) };

                return new object[] { helper.GetFileContentByEncoding(this.Address, operation.GetArgumentValue("DefaultFileEncoding")) };
            }
            else if (operation.Method == OperationMethod.Create)
            {
                //helper.WriteFile(this.Address, Parameters[1] as byte[]); 

                //helper.WriteFileByBase64(this.Address, Parameters[1].ToString());

                helper.WriteFileContentByEncoding(this.Address, Parameters[1].ToString(), operation.GetArgumentValue("DefaultFileEncoding"));

                return new object[] { };
            }
            else if (operation.Method == OperationMethod.List)
            {
                return new object[] { helper.ListFiles(this.Address, operation.GetArgumentValue("DefaultSearchPattern")) };

                //return new object[] { helper.ListFiles(this.Address, Parameters[1].ToString()) };
            }
            else if (operation.Method == OperationMethod.BatchWrite)
            {
                //return new object[] { helper.WriteFiles(this.Address, Parameters[1] as DataIntegrator.Descriptions.FileSystem.FSDDL.Directory) };

                return new object[] { helper.WriteFilesByFSDDL(this.Address, Parameters[1].ToString(), operation.GetArgumentValue("DefaultFileEncoding")) };
            }

            return null;
        }
    }
}

